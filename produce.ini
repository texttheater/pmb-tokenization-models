[]
prelude =
	LANGS = ('en', 'de', 'it', 'nl')
	ELMAN = { # character LLM to use for each language
		'en': 'english',
		'de': 'dutch', # HACK
		'it': 'italian',
		'nl': 'dutch',
	}
	# TODO train new character LLMS
default = %{f'out/{lang}.model' for lang in LANGS}

[out/%{lang}.model]
# TODO train on gold+silver
cond = %{lang in ('en', 'de')}
dep.elephant_train = elephant/elephant-train
dep.wappat = elephant/patterns/ngrams11-top10.wappat
dep.elman = elephant/models/%{ELMAN[lang]}/elman
dep.train = data/pmb-3.0.0-%{lang}-gold-train.tok.iob
dep.dev = data/pmb-3.0.0-%{lang}-gold-dev.tok.iob
recipe =
	set -e
	export PATH=elephant:elephant/ext:$PATH
	python2 %{elephant_train} -w %{wappat} -e %{elman} -i %{train} -d %{dev} -m %{target}

[out/%{lang}.model]
cond = %{lang in ('it', 'nl')}
dep.elephant_train = elephant/elephant-train
dep.wappat = elephant/patterns/ngrams11-top10.wappat
dep.elman = elephant/models/%{ELMAN[lang]}/elman
dep.train = data/pmb-3.0.0-%{lang}-silver-train.tok.iob
dep.dev = data/pmb-3.0.0-%{lang}-gold-dev.tok.iob
recipe =
	set -e
	export PATH=elephant:elephant/ext:$PATH
	python2 %{elephant_train} -w %{wappat} -e %{elman} -i %{train} -d %{dev} -m %{target}

[out/pmb-3.0.0-%{lang}-gold-%{portion}.tok.iob]
cond = %{lang in LANGS and portion in ('dev', 'test')}
dep.iob = data/pmb-3.0.0-%{lang}-gold-%{portion}.tok.iob
dep.model = out/%{lang}.model
dep.elephant = elephant/elephant
recipe =
	set -e
	set -o pipefail
	export PATH=elephant:elephant/ext:$PATH
	cat %{iob} | python2 %{elephant} -m %{model} -f iob -F iob > %{target}

[out/pmb-3.0.0-%{lang}-gold-%{portion}.tok]
cond = %{lang in LANGS and portion in ('dev', 'test')}
dep.iob = out/pmb-3.0.0-%{lang}-gold-%{portion}.tok.iob
dep.iob2tok = iob2tok.py
recipe =
	set -e
	set -o pipefail
	cat %{iob} | python3 %{iob2tok} > %{target}

[out/pmb-3.0.0-%{lang}-gold-%{portion}.tsv]
cond = %{lang in LANGS and portion in ('dev', 'test')}
dep.tok = out/pmb-3.0.0-%{lang}-gold-%{portion}.tok
recipe =
	set -e
	set -o pipefail
	cat %{tok} | sed -e 's/$/\n/' | sed -e 's/ /\n/g' > %{target}
